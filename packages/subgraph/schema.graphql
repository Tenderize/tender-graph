# Types

type Asset @entity {
  id: ID! # token address
  tvl: BigDecimal! # total value locked
  tenderizerCount: Int! # number of tenderizers for this asset
  # time series
  assetDays: [AssetDay!]! @derivedFrom(field: "asset")
}

type Tenderizer @entity {
  id: ID! # Tenderizer address
  # mirrored from the smart contract
  symbol: String!
  name: String!
  validator: String!
  asset: Asset!
  createdAt: Int!

  tvl: BigDecimal! # total value locked
  shares: BigDecimal! # total shares
  apr: BigDecimal!
  apy: BigDecimal!

  # balances
  stakes: [Stake!]! @derivedFrom(field: "tenderizer")

  # time series
  tenderizerDays: [TenderizerDay!]! @derivedFrom(field: "tenderizer")
  lastUpdateDay: BigInt! # last day the tenderizer was updated
  # events
  depositEvents: [DepositEvent!]! @derivedFrom(field: "tenderizer")
  unlockEvents: [UnlockEvent!]! @derivedFrom(field: "tenderizer")
  withdrawEvents: [WithdrawEvent!]! @derivedFrom(field: "tenderizer")
  rebaseEvents: [RebaseEvent!]! @derivedFrom(field: "tenderizer")
  tokenTransferEvents: [TokenTransferEvent!]! @derivedFrom(field: "tenderizer")
}

type User @entity {
  id: ID! # user address
  stakes: [Stake!] @derivedFrom(field: "user")
  unlocks: [Unlock!] @derivedFrom(field: "user")
  liquidityPositions: [LiquidityPosition!] @derivedFrom(field: "user")
}

type Stake @entity {
  id: ID! # tenderizer address + user address
  user: User!
  asset: Asset!
  tenderizer: Tenderizer!
  shares: BigDecimal!
  netDeposits: BigDecimal! # total deposits - total withdrawals, can be negative, used to calculate rewards
}

type Unlock @entity {
  id: ID! # ID of the unlock
  user: User!
  asset: Asset!
  tenderizer: Tenderizer!
  amount: BigDecimal!
  timestamp: Int!
  maturity: Int!
  redeemed: Boolean!
}

# Time Series

# Day data uses timestamps at 12:00 UTC for each day
# This is done by dividing the timestamp by 86400 and flooring it

type AssetDay @entity {
  id: ID! # asset address + date
  date: Int!

  asset: Asset!

  tvl: BigDecimal!
  rewards: BigDecimal!
}

type TenderizerDay @entity {
  id: ID! # tenderizer address + date
  date: Int!

  tenderizer: Tenderizer!

  shares: BigDecimal!
  tvl: BigDecimal!

  startStake: BigDecimal!
  rewards: BigDecimal!

  apr: BigDecimal!
  apy: BigDecimal!
}

# Events

type DepositEvent @entity {
  id: ID!
  timestamp: Int!

  assetsIn: BigDecimal!
  tTokenOut: BigDecimal!
  shares: BigDecimal!

  # Relational fields
  user: User!
  asset: Asset!
  tenderizer: Tenderizer!
}

type UnlockEvent @entity {
  id: ID!
  timestamp: Int!

  amount: BigDecimal!
  shares: BigDecimal!
  unlock: Unlock! # the unlock that was created
  # Relational fields
  user: User!
  asset: Asset!
  tenderizer: Tenderizer!
}

type WithdrawEvent @entity {
  id: ID!
  timestamp: Int!

  assetsOut: BigDecimal!
  unlock: Unlock! # the unlock that was consumed
  # Relational fields
  user: User!
  asset: Asset!
  tenderizer: Tenderizer!
}

type RebaseEvent @entity {
  id: ID!
  timestamp: Int!

  oldStake: BigDecimal!
  newStake: BigDecimal!

  # Relational fields
  asset: Asset!
  tenderizer: Tenderizer!
}

type TokenTransferEvent @entity {
  id: ID!
  timestamp: Int!

  amount: BigDecimal!
  shares: BigDecimal!
  from: User!
  to: User!

  # Relational fields
  asset: Asset!
  tenderizer: Tenderizer!
}

type SwapPool @entity {
  id: ID! # pool address
  createdAtTimestamp: Int!

  asset: String! # underlying asset
  lpToken: String! # LP token address
  totalSupply: BigInt! # LP token supply
  liabilities: BigInt! # total liabilities
  unlocking: BigInt! # total unlocking
  volume: BigInt! # lifetime volume
  volumeUSD: BigDecimal! # lifetime volume in USD
  fees: BigInt! # lifetime fees
  feesUSD: BigDecimal! # lifetime fees in USD
  lpRewards: BigInt! # lifetime LP rewards
  lpRewardsUSD: BigDecimal! # lifetime LP rewards in USD
  treasuryCut: BigInt! # treasury cut
  treasuryCutUSD: BigDecimal! # treasury cut in USD
  # unlockQueue: [SwapQueueItem!]! @derivedFrom(field: "pool")

  poolDays: [SwapPoolDay!]! @derivedFrom(field: "pool")
}

type SwapPoolDay @entity {
  id: ID! # pool address + date (timestamp rounded to current day by dividing by 86400)
  date: Int!

  pool: SwapPool!

  totalSupply: BigInt!
  liabilities: BigInt!
  unlocking: BigInt!

  volume: BigInt!
  volumeUSD: BigDecimal!
  fees: BigInt!
  feesUSD: BigDecimal!
  lpRewards: BigInt!
  lpRewardsUSD: BigDecimal!
  treasuryCut: BigInt!
  treasuryCutUSD: BigDecimal!
}

type LiquidityPosition @entity {
  id: ID! # user address + pool address
  user: User!
  pool: SwapPool!
  shares: BigInt!
  netDeposits: BigInt!
}

# type SwapQueueItem @entity {
#   id: ID!
#   pool: SwapPool!
#   unlock: Unlock!
#   fee: BigInt!
#   lpRewards: BigInt!
# }

type SwapEvent @entity {
  id: ID!
  timestamp: Int!
  blockNumber: BigInt!

  account: String!
  amount: BigInt!
  fee: BigInt!

  # Relational fields
  SwapPool: SwapPool!
}

type SwapDepositEvent @entity {
  id: ID!
  timestamp: Int!
  blockNumber: BigInt!

  account: String!
  amount: BigInt!
  sharesMinted: BigInt!

  # Relational fields
  SwapPool: SwapPool!
}

type SwapWithdrawEvent @entity {
  id: ID!
  timestamp: Int!
  blockNumber: BigInt!

  account: String!
  amount: BigInt!
  sharesBurnt: BigInt!

  # Relational fields
  SwapPool: SwapPool!
}

type SwapLPTokenTransferEvent @entity {
  id: ID!
  timestamp: Int!
  blockNumber: BigInt!

  from: String!
  to: String!
  shares: BigInt!
  value: BigInt!

  # Relational fields
  SwapPool: SwapPool!
}

type SwapUnlockBuyEvent @entity {
  id: ID!
  timestamp: Int!
  blockNumber: BigInt!

  account: String!

  unlock: Unlock!

  asset: String!
  amount: BigInt!
  reward: BigInt!
  lpFee: BigInt!

  # Relational fields
  SwapPool: SwapPool!
}

type SwapUnlockRedeemedEvent @entity {
  id: ID!
  timestamp: Int!
  blockNumber: BigInt!

  account: String!

  unlock: Unlock!

  asset: String!
  amount: BigInt!
  reward: BigInt!
  lpFee: BigInt!

  # Relational fields
  SwapPool: SwapPool!
}

type LPToken @entity {
  id: ID! # LP token address
  pool: SwapPool!
}
