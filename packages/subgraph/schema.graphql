# Types

type Asset @entity {
  id: ID! # token address
  tvl: BigDecimal! # total value locked
  tenderizerCount: Int! # number of tenderizers for this asset
  # time series
  assetDays: [AssetDay!]! @derivedFrom(field: "asset")
}

type Tenderizer @entity {
  id: ID! # Tenderizer address
  # mirrored from the smart contract
  symbol: String!
  name: String!
  validator: String!
  asset: Asset!
  createdAt: Int!

  tvl: BigDecimal! # total value locked
  shares: BigDecimal! # total shares
  apr: BigDecimal!
  apy: BigDecimal!

  # balances
  stakes: [Stake!]! @derivedFrom(field: "tenderizer")

  # time series
  tenderizerDays: [TenderizerDay!]! @derivedFrom(field: "tenderizer")
  lastUpdateDay: BigInt! # last day the tenderizer was updated
  # events
  depositEvents: [DepositEvent!]! @derivedFrom(field: "tenderizer")
  unlockEvents: [UnlockEvent!]! @derivedFrom(field: "tenderizer")
  withdrawEvents: [WithdrawEvent!]! @derivedFrom(field: "tenderizer")
  rebaseEvents: [RebaseEvent!]! @derivedFrom(field: "tenderizer")
  tokenTransferEvents: [TokenTransferEvent!]! @derivedFrom(field: "tenderizer")
}

type User @entity {
  id: ID! # user address
  stakes: [Stake!] @derivedFrom(field: "user")
  unlocks: [Unlock!] @derivedFrom(field: "user")
}

type Stake @entity {
  id: ID! # tenderizer address + user address
  user: User!
  asset: Asset!
  tenderizer: Tenderizer!
  shares: BigDecimal!
}

type Unlock @entity {
  id: ID! # ID of the unlock
  user: User!
  asset: Asset!
  tenderizer: Tenderizer!
  amount: BigDecimal!
  timestamp: Int!
  maturity: Int!
  redeemed: Boolean!
}

# Time Series

# Day data uses timestamps at 12:00 UTC for each day
# This is done by dividing the timestamp by 86400 and flooring it

type AssetDay @entity {
  id: ID! # asset address + date
  date: Int!

  asset: Asset!

  tvl: BigDecimal!
  rewards: BigDecimal!
}

type TenderizerDay @entity {
  id: ID! # tenderizer address + date
  date: Int!

  tenderizer: Tenderizer!

  shares: BigDecimal!
  tvl: BigDecimal!

  startStake: BigDecimal!
  rewards: BigDecimal!

  apr: BigDecimal!
  apy: BigDecimal!
}

# Events

type DepositEvent @entity {
  id: ID!
  timestamp: Int!

  assetsIn: BigDecimal!
  tTokenOut: BigDecimal!
  shares: BigDecimal!

  # Relational fields
  user: User!
  asset: Asset!
  tenderizer: Tenderizer!
}

type UnlockEvent @entity {
  id: ID!
  timestamp: Int!

  amount: BigDecimal!
  shares: BigDecimal!
  unlock: Unlock! # the unlock that was created
  # Relational fields
  user: User!
  asset: Asset!
  tenderizer: Tenderizer!
}

type WithdrawEvent @entity {
  id: ID!
  timestamp: Int!

  assetsOut: BigDecimal!
  unlock: Unlock! # the unlock that was consumed
  # Relational fields
  user: User!
  asset: Asset!
  tenderizer: Tenderizer!
}

type RebaseEvent @entity {
  id: ID!
  timestamp: Int!

  oldStake: BigDecimal!
  newStake: BigDecimal!

  # Relational fields
  asset: Asset!
  tenderizer: Tenderizer!
}

type TokenTransferEvent @entity {
  id: ID!
  timestamp: Int!

  amount: BigDecimal!
  shares: BigDecimal!
  from: User!
  to: User!

  # Relational fields
  asset: Asset!
  tenderizer: Tenderizer!
}
