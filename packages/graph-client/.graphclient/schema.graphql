schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

type Asset {
  id: ID!
  tvl: BigDecimal!
  tenderizerCount: Int!
  assetDays(skip: Int = 0, first: Int = 100, orderBy: AssetDay_orderBy, orderDirection: OrderDirection, where: AssetDay_filter): [AssetDay!]!
}

type AssetDay {
  id: ID!
  date: Int!
  asset: Asset!
  tvl: BigDecimal!
  rewards: BigDecimal!
}

input AssetDay_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: Asset_filter
  tvl: BigDecimal
  tvl_not: BigDecimal
  tvl_gt: BigDecimal
  tvl_lt: BigDecimal
  tvl_gte: BigDecimal
  tvl_lte: BigDecimal
  tvl_in: [BigDecimal!]
  tvl_not_in: [BigDecimal!]
  rewards: BigDecimal
  rewards_not: BigDecimal
  rewards_gt: BigDecimal
  rewards_lt: BigDecimal
  rewards_gte: BigDecimal
  rewards_lte: BigDecimal
  rewards_in: [BigDecimal!]
  rewards_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AssetDay_filter]
  or: [AssetDay_filter]
}

enum AssetDay_orderBy {
  id
  date
  asset
  asset__id
  asset__tvl
  asset__tenderizerCount
  tvl
  rewards
}

input Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tvl: BigDecimal
  tvl_not: BigDecimal
  tvl_gt: BigDecimal
  tvl_lt: BigDecimal
  tvl_gte: BigDecimal
  tvl_lte: BigDecimal
  tvl_in: [BigDecimal!]
  tvl_not_in: [BigDecimal!]
  tenderizerCount: Int
  tenderizerCount_not: Int
  tenderizerCount_gt: Int
  tenderizerCount_lt: Int
  tenderizerCount_gte: Int
  tenderizerCount_lte: Int
  tenderizerCount_in: [Int!]
  tenderizerCount_not_in: [Int!]
  assetDays_: AssetDay_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Asset_filter]
  or: [Asset_filter]
}

enum Asset_orderBy {
  id
  tvl
  tenderizerCount
  assetDays
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type DepositEvent {
  id: ID!
  timestamp: Int!
  assetsIn: BigDecimal!
  tTokenOut: BigDecimal!
  shares: BigDecimal!
  user: User!
  asset: Asset!
  tenderizer: Tenderizer!
}

input DepositEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  assetsIn: BigDecimal
  assetsIn_not: BigDecimal
  assetsIn_gt: BigDecimal
  assetsIn_lt: BigDecimal
  assetsIn_gte: BigDecimal
  assetsIn_lte: BigDecimal
  assetsIn_in: [BigDecimal!]
  assetsIn_not_in: [BigDecimal!]
  tTokenOut: BigDecimal
  tTokenOut_not: BigDecimal
  tTokenOut_gt: BigDecimal
  tTokenOut_lt: BigDecimal
  tTokenOut_gte: BigDecimal
  tTokenOut_lte: BigDecimal
  tTokenOut_in: [BigDecimal!]
  tTokenOut_not_in: [BigDecimal!]
  shares: BigDecimal
  shares_not: BigDecimal
  shares_gt: BigDecimal
  shares_lt: BigDecimal
  shares_gte: BigDecimal
  shares_lte: BigDecimal
  shares_in: [BigDecimal!]
  shares_not_in: [BigDecimal!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: Asset_filter
  tenderizer: String
  tenderizer_not: String
  tenderizer_gt: String
  tenderizer_lt: String
  tenderizer_gte: String
  tenderizer_lte: String
  tenderizer_in: [String!]
  tenderizer_not_in: [String!]
  tenderizer_contains: String
  tenderizer_contains_nocase: String
  tenderizer_not_contains: String
  tenderizer_not_contains_nocase: String
  tenderizer_starts_with: String
  tenderizer_starts_with_nocase: String
  tenderizer_not_starts_with: String
  tenderizer_not_starts_with_nocase: String
  tenderizer_ends_with: String
  tenderizer_ends_with_nocase: String
  tenderizer_not_ends_with: String
  tenderizer_not_ends_with_nocase: String
  tenderizer_: Tenderizer_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DepositEvent_filter]
  or: [DepositEvent_filter]
}

enum DepositEvent_orderBy {
  id
  timestamp
  assetsIn
  tTokenOut
  shares
  user
  user__id
  asset
  asset__id
  asset__tvl
  asset__tenderizerCount
  tenderizer
  tenderizer__id
  tenderizer__symbol
  tenderizer__name
  tenderizer__validator
  tenderizer__createdAt
  tenderizer__tvl
  tenderizer__shares
  tenderizer__apr
  tenderizer__apy
  tenderizer__lastUpdateDay
}

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Asset
  assets(
    skip: Int = 0
    first: Int = 100
    orderBy: Asset_orderBy
    orderDirection: OrderDirection
    where: Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Asset!]!
  tenderizer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Tenderizer
  tenderizers(
    skip: Int = 0
    first: Int = 100
    orderBy: Tenderizer_orderBy
    orderDirection: OrderDirection
    where: Tenderizer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Tenderizer!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  stake(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Stake
  stakes(
    skip: Int = 0
    first: Int = 100
    orderBy: Stake_orderBy
    orderDirection: OrderDirection
    where: Stake_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Stake!]!
  unlock(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Unlock
  unlocks(
    skip: Int = 0
    first: Int = 100
    orderBy: Unlock_orderBy
    orderDirection: OrderDirection
    where: Unlock_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Unlock!]!
  assetDay(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AssetDay
  assetDays(
    skip: Int = 0
    first: Int = 100
    orderBy: AssetDay_orderBy
    orderDirection: OrderDirection
    where: AssetDay_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AssetDay!]!
  tenderizerDay(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TenderizerDay
  tenderizerDays(
    skip: Int = 0
    first: Int = 100
    orderBy: TenderizerDay_orderBy
    orderDirection: OrderDirection
    where: TenderizerDay_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TenderizerDay!]!
  depositEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DepositEvent
  depositEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: DepositEvent_orderBy
    orderDirection: OrderDirection
    where: DepositEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DepositEvent!]!
  unlockEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UnlockEvent
  unlockEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: UnlockEvent_orderBy
    orderDirection: OrderDirection
    where: UnlockEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UnlockEvent!]!
  withdrawEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WithdrawEvent
  withdrawEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawEvent_orderBy
    orderDirection: OrderDirection
    where: WithdrawEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WithdrawEvent!]!
  rebaseEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RebaseEvent
  rebaseEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: RebaseEvent_orderBy
    orderDirection: OrderDirection
    where: RebaseEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RebaseEvent!]!
  tokenTransferEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenTransferEvent
  tokenTransferEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenTransferEvent_orderBy
    orderDirection: OrderDirection
    where: TokenTransferEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenTransferEvent!]!
  swapPool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapPool
  swapPools(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapPool_orderBy
    orderDirection: OrderDirection
    where: SwapPool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapPool!]!
  swapPoolDay(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapPoolDay
  swapPoolDays(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapPoolDay_orderBy
    orderDirection: OrderDirection
    where: SwapPoolDay_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapPoolDay!]!
  swapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapEvent
  swapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapEvent_orderBy
    orderDirection: OrderDirection
    where: SwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapEvent!]!
  swapDepositEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapDepositEvent
  swapDepositEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapDepositEvent_orderBy
    orderDirection: OrderDirection
    where: SwapDepositEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapDepositEvent!]!
  swapWithdrawEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapWithdrawEvent
  swapWithdrawEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapWithdrawEvent_orderBy
    orderDirection: OrderDirection
    where: SwapWithdrawEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapWithdrawEvent!]!
  swapUnlockBuyEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapUnlockBuyEvent
  swapUnlockBuyEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapUnlockBuyEvent_orderBy
    orderDirection: OrderDirection
    where: SwapUnlockBuyEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapUnlockBuyEvent!]!
  swapUnlockRedeemedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapUnlockRedeemedEvent
  swapUnlockRedeemedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapUnlockRedeemedEvent_orderBy
    orderDirection: OrderDirection
    where: SwapUnlockRedeemedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapUnlockRedeemedEvent!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type RebaseEvent {
  id: ID!
  timestamp: Int!
  oldStake: BigDecimal!
  newStake: BigDecimal!
  asset: Asset!
  tenderizer: Tenderizer!
}

input RebaseEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  oldStake: BigDecimal
  oldStake_not: BigDecimal
  oldStake_gt: BigDecimal
  oldStake_lt: BigDecimal
  oldStake_gte: BigDecimal
  oldStake_lte: BigDecimal
  oldStake_in: [BigDecimal!]
  oldStake_not_in: [BigDecimal!]
  newStake: BigDecimal
  newStake_not: BigDecimal
  newStake_gt: BigDecimal
  newStake_lt: BigDecimal
  newStake_gte: BigDecimal
  newStake_lte: BigDecimal
  newStake_in: [BigDecimal!]
  newStake_not_in: [BigDecimal!]
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: Asset_filter
  tenderizer: String
  tenderizer_not: String
  tenderizer_gt: String
  tenderizer_lt: String
  tenderizer_gte: String
  tenderizer_lte: String
  tenderizer_in: [String!]
  tenderizer_not_in: [String!]
  tenderizer_contains: String
  tenderizer_contains_nocase: String
  tenderizer_not_contains: String
  tenderizer_not_contains_nocase: String
  tenderizer_starts_with: String
  tenderizer_starts_with_nocase: String
  tenderizer_not_starts_with: String
  tenderizer_not_starts_with_nocase: String
  tenderizer_ends_with: String
  tenderizer_ends_with_nocase: String
  tenderizer_not_ends_with: String
  tenderizer_not_ends_with_nocase: String
  tenderizer_: Tenderizer_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RebaseEvent_filter]
  or: [RebaseEvent_filter]
}

enum RebaseEvent_orderBy {
  id
  timestamp
  oldStake
  newStake
  asset
  asset__id
  asset__tvl
  asset__tenderizerCount
  tenderizer
  tenderizer__id
  tenderizer__symbol
  tenderizer__name
  tenderizer__validator
  tenderizer__createdAt
  tenderizer__tvl
  tenderizer__shares
  tenderizer__apr
  tenderizer__apy
  tenderizer__lastUpdateDay
}

type Stake {
  id: ID!
  user: User!
  asset: Asset!
  tenderizer: Tenderizer!
  shares: BigDecimal!
}

input Stake_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: Asset_filter
  tenderizer: String
  tenderizer_not: String
  tenderizer_gt: String
  tenderizer_lt: String
  tenderizer_gte: String
  tenderizer_lte: String
  tenderizer_in: [String!]
  tenderizer_not_in: [String!]
  tenderizer_contains: String
  tenderizer_contains_nocase: String
  tenderizer_not_contains: String
  tenderizer_not_contains_nocase: String
  tenderizer_starts_with: String
  tenderizer_starts_with_nocase: String
  tenderizer_not_starts_with: String
  tenderizer_not_starts_with_nocase: String
  tenderizer_ends_with: String
  tenderizer_ends_with_nocase: String
  tenderizer_not_ends_with: String
  tenderizer_not_ends_with_nocase: String
  tenderizer_: Tenderizer_filter
  shares: BigDecimal
  shares_not: BigDecimal
  shares_gt: BigDecimal
  shares_lt: BigDecimal
  shares_gte: BigDecimal
  shares_lte: BigDecimal
  shares_in: [BigDecimal!]
  shares_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Stake_filter]
  or: [Stake_filter]
}

enum Stake_orderBy {
  id
  user
  user__id
  asset
  asset__id
  asset__tvl
  asset__tenderizerCount
  tenderizer
  tenderizer__id
  tenderizer__symbol
  tenderizer__name
  tenderizer__validator
  tenderizer__createdAt
  tenderizer__tvl
  tenderizer__shares
  tenderizer__apr
  tenderizer__apy
  tenderizer__lastUpdateDay
  shares
}

type Subscription {
  asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Asset
  assets(
    skip: Int = 0
    first: Int = 100
    orderBy: Asset_orderBy
    orderDirection: OrderDirection
    where: Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Asset!]!
  tenderizer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Tenderizer
  tenderizers(
    skip: Int = 0
    first: Int = 100
    orderBy: Tenderizer_orderBy
    orderDirection: OrderDirection
    where: Tenderizer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Tenderizer!]!
  user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  stake(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Stake
  stakes(
    skip: Int = 0
    first: Int = 100
    orderBy: Stake_orderBy
    orderDirection: OrderDirection
    where: Stake_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Stake!]!
  unlock(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Unlock
  unlocks(
    skip: Int = 0
    first: Int = 100
    orderBy: Unlock_orderBy
    orderDirection: OrderDirection
    where: Unlock_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Unlock!]!
  assetDay(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AssetDay
  assetDays(
    skip: Int = 0
    first: Int = 100
    orderBy: AssetDay_orderBy
    orderDirection: OrderDirection
    where: AssetDay_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AssetDay!]!
  tenderizerDay(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TenderizerDay
  tenderizerDays(
    skip: Int = 0
    first: Int = 100
    orderBy: TenderizerDay_orderBy
    orderDirection: OrderDirection
    where: TenderizerDay_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TenderizerDay!]!
  depositEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DepositEvent
  depositEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: DepositEvent_orderBy
    orderDirection: OrderDirection
    where: DepositEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DepositEvent!]!
  unlockEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UnlockEvent
  unlockEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: UnlockEvent_orderBy
    orderDirection: OrderDirection
    where: UnlockEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UnlockEvent!]!
  withdrawEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WithdrawEvent
  withdrawEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawEvent_orderBy
    orderDirection: OrderDirection
    where: WithdrawEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WithdrawEvent!]!
  rebaseEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RebaseEvent
  rebaseEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: RebaseEvent_orderBy
    orderDirection: OrderDirection
    where: RebaseEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RebaseEvent!]!
  tokenTransferEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenTransferEvent
  tokenTransferEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenTransferEvent_orderBy
    orderDirection: OrderDirection
    where: TokenTransferEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenTransferEvent!]!
  swapPool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapPool
  swapPools(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapPool_orderBy
    orderDirection: OrderDirection
    where: SwapPool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapPool!]!
  swapPoolDay(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapPoolDay
  swapPoolDays(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapPoolDay_orderBy
    orderDirection: OrderDirection
    where: SwapPoolDay_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapPoolDay!]!
  swapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapEvent
  swapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapEvent_orderBy
    orderDirection: OrderDirection
    where: SwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapEvent!]!
  swapDepositEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapDepositEvent
  swapDepositEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapDepositEvent_orderBy
    orderDirection: OrderDirection
    where: SwapDepositEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapDepositEvent!]!
  swapWithdrawEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapWithdrawEvent
  swapWithdrawEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapWithdrawEvent_orderBy
    orderDirection: OrderDirection
    where: SwapWithdrawEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapWithdrawEvent!]!
  swapUnlockBuyEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapUnlockBuyEvent
  swapUnlockBuyEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapUnlockBuyEvent_orderBy
    orderDirection: OrderDirection
    where: SwapUnlockBuyEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapUnlockBuyEvent!]!
  swapUnlockRedeemedEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapUnlockRedeemedEvent
  swapUnlockRedeemedEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapUnlockRedeemedEvent_orderBy
    orderDirection: OrderDirection
    where: SwapUnlockRedeemedEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapUnlockRedeemedEvent!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type SwapDepositEvent {
  id: ID!
  timestamp: Int!
  blockNumber: Int!
  account: String!
  amount: BigInt!
  sharesMinted: BigInt!
  SwapPool: SwapPool!
}

input SwapDepositEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  sharesMinted: BigInt
  sharesMinted_not: BigInt
  sharesMinted_gt: BigInt
  sharesMinted_lt: BigInt
  sharesMinted_gte: BigInt
  sharesMinted_lte: BigInt
  sharesMinted_in: [BigInt!]
  sharesMinted_not_in: [BigInt!]
  SwapPool: String
  SwapPool_not: String
  SwapPool_gt: String
  SwapPool_lt: String
  SwapPool_gte: String
  SwapPool_lte: String
  SwapPool_in: [String!]
  SwapPool_not_in: [String!]
  SwapPool_contains: String
  SwapPool_contains_nocase: String
  SwapPool_not_contains: String
  SwapPool_not_contains_nocase: String
  SwapPool_starts_with: String
  SwapPool_starts_with_nocase: String
  SwapPool_not_starts_with: String
  SwapPool_not_starts_with_nocase: String
  SwapPool_ends_with: String
  SwapPool_ends_with_nocase: String
  SwapPool_not_ends_with: String
  SwapPool_not_ends_with_nocase: String
  SwapPool_: SwapPool_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SwapDepositEvent_filter]
  or: [SwapDepositEvent_filter]
}

enum SwapDepositEvent_orderBy {
  id
  timestamp
  blockNumber
  account
  amount
  sharesMinted
  SwapPool
  SwapPool__id
  SwapPool__createdAtTimestamp
  SwapPool__asset
  SwapPool__lpToken
  SwapPool__totalSupply
  SwapPool__liabilities
  SwapPool__unlocking
  SwapPool__volume
  SwapPool__volumeUSD
  SwapPool__fees
  SwapPool__feesUSD
  SwapPool__lpRewards
  SwapPool__lpRewardsUSD
  SwapPool__treasuryCut
  SwapPool__treasuryCutUSD
}

type SwapEvent {
  id: ID!
  timestamp: Int!
  blockNumber: Int!
  account: String!
  amount: BigInt!
  fee: BigInt!
  SwapPool: SwapPool!
}

input SwapEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  SwapPool: String
  SwapPool_not: String
  SwapPool_gt: String
  SwapPool_lt: String
  SwapPool_gte: String
  SwapPool_lte: String
  SwapPool_in: [String!]
  SwapPool_not_in: [String!]
  SwapPool_contains: String
  SwapPool_contains_nocase: String
  SwapPool_not_contains: String
  SwapPool_not_contains_nocase: String
  SwapPool_starts_with: String
  SwapPool_starts_with_nocase: String
  SwapPool_not_starts_with: String
  SwapPool_not_starts_with_nocase: String
  SwapPool_ends_with: String
  SwapPool_ends_with_nocase: String
  SwapPool_not_ends_with: String
  SwapPool_not_ends_with_nocase: String
  SwapPool_: SwapPool_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SwapEvent_filter]
  or: [SwapEvent_filter]
}

enum SwapEvent_orderBy {
  id
  timestamp
  blockNumber
  account
  amount
  fee
  SwapPool
  SwapPool__id
  SwapPool__createdAtTimestamp
  SwapPool__asset
  SwapPool__lpToken
  SwapPool__totalSupply
  SwapPool__liabilities
  SwapPool__unlocking
  SwapPool__volume
  SwapPool__volumeUSD
  SwapPool__fees
  SwapPool__feesUSD
  SwapPool__lpRewards
  SwapPool__lpRewardsUSD
  SwapPool__treasuryCut
  SwapPool__treasuryCutUSD
}

type SwapPool {
  id: ID!
  createdAtTimestamp: Int!
  asset: String!
  lpToken: String!
  totalSupply: BigInt!
  liabilities: BigInt!
  unlocking: BigInt!
  volume: BigInt!
  volumeUSD: BigDecimal!
  fees: BigInt!
  feesUSD: BigDecimal!
  lpRewards: BigInt!
  lpRewardsUSD: BigDecimal!
  treasuryCut: BigInt!
  treasuryCutUSD: BigDecimal!
  poolDays(skip: Int = 0, first: Int = 100, orderBy: SwapPoolDay_orderBy, orderDirection: OrderDirection, where: SwapPoolDay_filter): [SwapPoolDay!]!
}

type SwapPoolDay {
  id: ID!
  date: Int!
  pool: SwapPool!
  totalSupply: BigInt!
  liabilities: BigInt!
  unlocking: BigInt!
  volume: BigInt!
  volumeUSD: BigDecimal!
  fees: BigInt!
  feesUSD: BigDecimal!
  lpRewards: BigInt!
  lpRewardsUSD: BigDecimal!
  treasuryCut: BigInt!
  treasuryCutUSD: BigDecimal!
}

input SwapPoolDay_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: SwapPool_filter
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  liabilities: BigInt
  liabilities_not: BigInt
  liabilities_gt: BigInt
  liabilities_lt: BigInt
  liabilities_gte: BigInt
  liabilities_lte: BigInt
  liabilities_in: [BigInt!]
  liabilities_not_in: [BigInt!]
  unlocking: BigInt
  unlocking_not: BigInt
  unlocking_gt: BigInt
  unlocking_lt: BigInt
  unlocking_gte: BigInt
  unlocking_lte: BigInt
  unlocking_in: [BigInt!]
  unlocking_not_in: [BigInt!]
  volume: BigInt
  volume_not: BigInt
  volume_gt: BigInt
  volume_lt: BigInt
  volume_gte: BigInt
  volume_lte: BigInt
  volume_in: [BigInt!]
  volume_not_in: [BigInt!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  fees: BigInt
  fees_not: BigInt
  fees_gt: BigInt
  fees_lt: BigInt
  fees_gte: BigInt
  fees_lte: BigInt
  fees_in: [BigInt!]
  fees_not_in: [BigInt!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  lpRewards: BigInt
  lpRewards_not: BigInt
  lpRewards_gt: BigInt
  lpRewards_lt: BigInt
  lpRewards_gte: BigInt
  lpRewards_lte: BigInt
  lpRewards_in: [BigInt!]
  lpRewards_not_in: [BigInt!]
  lpRewardsUSD: BigDecimal
  lpRewardsUSD_not: BigDecimal
  lpRewardsUSD_gt: BigDecimal
  lpRewardsUSD_lt: BigDecimal
  lpRewardsUSD_gte: BigDecimal
  lpRewardsUSD_lte: BigDecimal
  lpRewardsUSD_in: [BigDecimal!]
  lpRewardsUSD_not_in: [BigDecimal!]
  treasuryCut: BigInt
  treasuryCut_not: BigInt
  treasuryCut_gt: BigInt
  treasuryCut_lt: BigInt
  treasuryCut_gte: BigInt
  treasuryCut_lte: BigInt
  treasuryCut_in: [BigInt!]
  treasuryCut_not_in: [BigInt!]
  treasuryCutUSD: BigDecimal
  treasuryCutUSD_not: BigDecimal
  treasuryCutUSD_gt: BigDecimal
  treasuryCutUSD_lt: BigDecimal
  treasuryCutUSD_gte: BigDecimal
  treasuryCutUSD_lte: BigDecimal
  treasuryCutUSD_in: [BigDecimal!]
  treasuryCutUSD_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SwapPoolDay_filter]
  or: [SwapPoolDay_filter]
}

enum SwapPoolDay_orderBy {
  id
  date
  pool
  pool__id
  pool__createdAtTimestamp
  pool__asset
  pool__lpToken
  pool__totalSupply
  pool__liabilities
  pool__unlocking
  pool__volume
  pool__volumeUSD
  pool__fees
  pool__feesUSD
  pool__lpRewards
  pool__lpRewardsUSD
  pool__treasuryCut
  pool__treasuryCutUSD
  totalSupply
  liabilities
  unlocking
  volume
  volumeUSD
  fees
  feesUSD
  lpRewards
  lpRewardsUSD
  treasuryCut
  treasuryCutUSD
}

input SwapPool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  createdAtTimestamp: Int
  createdAtTimestamp_not: Int
  createdAtTimestamp_gt: Int
  createdAtTimestamp_lt: Int
  createdAtTimestamp_gte: Int
  createdAtTimestamp_lte: Int
  createdAtTimestamp_in: [Int!]
  createdAtTimestamp_not_in: [Int!]
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  lpToken: String
  lpToken_not: String
  lpToken_gt: String
  lpToken_lt: String
  lpToken_gte: String
  lpToken_lte: String
  lpToken_in: [String!]
  lpToken_not_in: [String!]
  lpToken_contains: String
  lpToken_contains_nocase: String
  lpToken_not_contains: String
  lpToken_not_contains_nocase: String
  lpToken_starts_with: String
  lpToken_starts_with_nocase: String
  lpToken_not_starts_with: String
  lpToken_not_starts_with_nocase: String
  lpToken_ends_with: String
  lpToken_ends_with_nocase: String
  lpToken_not_ends_with: String
  lpToken_not_ends_with_nocase: String
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  liabilities: BigInt
  liabilities_not: BigInt
  liabilities_gt: BigInt
  liabilities_lt: BigInt
  liabilities_gte: BigInt
  liabilities_lte: BigInt
  liabilities_in: [BigInt!]
  liabilities_not_in: [BigInt!]
  unlocking: BigInt
  unlocking_not: BigInt
  unlocking_gt: BigInt
  unlocking_lt: BigInt
  unlocking_gte: BigInt
  unlocking_lte: BigInt
  unlocking_in: [BigInt!]
  unlocking_not_in: [BigInt!]
  volume: BigInt
  volume_not: BigInt
  volume_gt: BigInt
  volume_lt: BigInt
  volume_gte: BigInt
  volume_lte: BigInt
  volume_in: [BigInt!]
  volume_not_in: [BigInt!]
  volumeUSD: BigDecimal
  volumeUSD_not: BigDecimal
  volumeUSD_gt: BigDecimal
  volumeUSD_lt: BigDecimal
  volumeUSD_gte: BigDecimal
  volumeUSD_lte: BigDecimal
  volumeUSD_in: [BigDecimal!]
  volumeUSD_not_in: [BigDecimal!]
  fees: BigInt
  fees_not: BigInt
  fees_gt: BigInt
  fees_lt: BigInt
  fees_gte: BigInt
  fees_lte: BigInt
  fees_in: [BigInt!]
  fees_not_in: [BigInt!]
  feesUSD: BigDecimal
  feesUSD_not: BigDecimal
  feesUSD_gt: BigDecimal
  feesUSD_lt: BigDecimal
  feesUSD_gte: BigDecimal
  feesUSD_lte: BigDecimal
  feesUSD_in: [BigDecimal!]
  feesUSD_not_in: [BigDecimal!]
  lpRewards: BigInt
  lpRewards_not: BigInt
  lpRewards_gt: BigInt
  lpRewards_lt: BigInt
  lpRewards_gte: BigInt
  lpRewards_lte: BigInt
  lpRewards_in: [BigInt!]
  lpRewards_not_in: [BigInt!]
  lpRewardsUSD: BigDecimal
  lpRewardsUSD_not: BigDecimal
  lpRewardsUSD_gt: BigDecimal
  lpRewardsUSD_lt: BigDecimal
  lpRewardsUSD_gte: BigDecimal
  lpRewardsUSD_lte: BigDecimal
  lpRewardsUSD_in: [BigDecimal!]
  lpRewardsUSD_not_in: [BigDecimal!]
  treasuryCut: BigInt
  treasuryCut_not: BigInt
  treasuryCut_gt: BigInt
  treasuryCut_lt: BigInt
  treasuryCut_gte: BigInt
  treasuryCut_lte: BigInt
  treasuryCut_in: [BigInt!]
  treasuryCut_not_in: [BigInt!]
  treasuryCutUSD: BigDecimal
  treasuryCutUSD_not: BigDecimal
  treasuryCutUSD_gt: BigDecimal
  treasuryCutUSD_lt: BigDecimal
  treasuryCutUSD_gte: BigDecimal
  treasuryCutUSD_lte: BigDecimal
  treasuryCutUSD_in: [BigDecimal!]
  treasuryCutUSD_not_in: [BigDecimal!]
  poolDays_: SwapPoolDay_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SwapPool_filter]
  or: [SwapPool_filter]
}

enum SwapPool_orderBy {
  id
  createdAtTimestamp
  asset
  lpToken
  totalSupply
  liabilities
  unlocking
  volume
  volumeUSD
  fees
  feesUSD
  lpRewards
  lpRewardsUSD
  treasuryCut
  treasuryCutUSD
  poolDays
}

type SwapUnlockBuyEvent {
  id: ID!
  timestamp: Int!
  blockNumber: Int!
  account: String!
  unlock: Unlock!
  asset: String!
  amount: BigInt!
  reward: BigInt!
  lpFee: BigInt!
  SwapPool: SwapPool!
}

input SwapUnlockBuyEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  unlock: String
  unlock_not: String
  unlock_gt: String
  unlock_lt: String
  unlock_gte: String
  unlock_lte: String
  unlock_in: [String!]
  unlock_not_in: [String!]
  unlock_contains: String
  unlock_contains_nocase: String
  unlock_not_contains: String
  unlock_not_contains_nocase: String
  unlock_starts_with: String
  unlock_starts_with_nocase: String
  unlock_not_starts_with: String
  unlock_not_starts_with_nocase: String
  unlock_ends_with: String
  unlock_ends_with_nocase: String
  unlock_not_ends_with: String
  unlock_not_ends_with_nocase: String
  unlock_: Unlock_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  reward: BigInt
  reward_not: BigInt
  reward_gt: BigInt
  reward_lt: BigInt
  reward_gte: BigInt
  reward_lte: BigInt
  reward_in: [BigInt!]
  reward_not_in: [BigInt!]
  lpFee: BigInt
  lpFee_not: BigInt
  lpFee_gt: BigInt
  lpFee_lt: BigInt
  lpFee_gte: BigInt
  lpFee_lte: BigInt
  lpFee_in: [BigInt!]
  lpFee_not_in: [BigInt!]
  SwapPool: String
  SwapPool_not: String
  SwapPool_gt: String
  SwapPool_lt: String
  SwapPool_gte: String
  SwapPool_lte: String
  SwapPool_in: [String!]
  SwapPool_not_in: [String!]
  SwapPool_contains: String
  SwapPool_contains_nocase: String
  SwapPool_not_contains: String
  SwapPool_not_contains_nocase: String
  SwapPool_starts_with: String
  SwapPool_starts_with_nocase: String
  SwapPool_not_starts_with: String
  SwapPool_not_starts_with_nocase: String
  SwapPool_ends_with: String
  SwapPool_ends_with_nocase: String
  SwapPool_not_ends_with: String
  SwapPool_not_ends_with_nocase: String
  SwapPool_: SwapPool_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SwapUnlockBuyEvent_filter]
  or: [SwapUnlockBuyEvent_filter]
}

enum SwapUnlockBuyEvent_orderBy {
  id
  timestamp
  blockNumber
  account
  unlock
  unlock__id
  unlock__amount
  unlock__timestamp
  unlock__maturity
  unlock__redeemed
  asset
  amount
  reward
  lpFee
  SwapPool
  SwapPool__id
  SwapPool__createdAtTimestamp
  SwapPool__asset
  SwapPool__lpToken
  SwapPool__totalSupply
  SwapPool__liabilities
  SwapPool__unlocking
  SwapPool__volume
  SwapPool__volumeUSD
  SwapPool__fees
  SwapPool__feesUSD
  SwapPool__lpRewards
  SwapPool__lpRewardsUSD
  SwapPool__treasuryCut
  SwapPool__treasuryCutUSD
}

type SwapUnlockRedeemedEvent {
  id: ID!
  timestamp: Int!
  blockNumber: Int!
  account: String!
  unlock: Unlock!
  asset: String!
  amount: BigInt!
  reward: BigInt!
  lpFee: BigInt!
  SwapPool: SwapPool!
}

input SwapUnlockRedeemedEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  unlock: String
  unlock_not: String
  unlock_gt: String
  unlock_lt: String
  unlock_gte: String
  unlock_lte: String
  unlock_in: [String!]
  unlock_not_in: [String!]
  unlock_contains: String
  unlock_contains_nocase: String
  unlock_not_contains: String
  unlock_not_contains_nocase: String
  unlock_starts_with: String
  unlock_starts_with_nocase: String
  unlock_not_starts_with: String
  unlock_not_starts_with_nocase: String
  unlock_ends_with: String
  unlock_ends_with_nocase: String
  unlock_not_ends_with: String
  unlock_not_ends_with_nocase: String
  unlock_: Unlock_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  reward: BigInt
  reward_not: BigInt
  reward_gt: BigInt
  reward_lt: BigInt
  reward_gte: BigInt
  reward_lte: BigInt
  reward_in: [BigInt!]
  reward_not_in: [BigInt!]
  lpFee: BigInt
  lpFee_not: BigInt
  lpFee_gt: BigInt
  lpFee_lt: BigInt
  lpFee_gte: BigInt
  lpFee_lte: BigInt
  lpFee_in: [BigInt!]
  lpFee_not_in: [BigInt!]
  SwapPool: String
  SwapPool_not: String
  SwapPool_gt: String
  SwapPool_lt: String
  SwapPool_gte: String
  SwapPool_lte: String
  SwapPool_in: [String!]
  SwapPool_not_in: [String!]
  SwapPool_contains: String
  SwapPool_contains_nocase: String
  SwapPool_not_contains: String
  SwapPool_not_contains_nocase: String
  SwapPool_starts_with: String
  SwapPool_starts_with_nocase: String
  SwapPool_not_starts_with: String
  SwapPool_not_starts_with_nocase: String
  SwapPool_ends_with: String
  SwapPool_ends_with_nocase: String
  SwapPool_not_ends_with: String
  SwapPool_not_ends_with_nocase: String
  SwapPool_: SwapPool_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SwapUnlockRedeemedEvent_filter]
  or: [SwapUnlockRedeemedEvent_filter]
}

enum SwapUnlockRedeemedEvent_orderBy {
  id
  timestamp
  blockNumber
  account
  unlock
  unlock__id
  unlock__amount
  unlock__timestamp
  unlock__maturity
  unlock__redeemed
  asset
  amount
  reward
  lpFee
  SwapPool
  SwapPool__id
  SwapPool__createdAtTimestamp
  SwapPool__asset
  SwapPool__lpToken
  SwapPool__totalSupply
  SwapPool__liabilities
  SwapPool__unlocking
  SwapPool__volume
  SwapPool__volumeUSD
  SwapPool__fees
  SwapPool__feesUSD
  SwapPool__lpRewards
  SwapPool__lpRewardsUSD
  SwapPool__treasuryCut
  SwapPool__treasuryCutUSD
}

type SwapWithdrawEvent {
  id: ID!
  timestamp: Int!
  blockNumber: Int!
  account: String!
  amount: BigInt!
  sharesBurned: BigInt!
  SwapPool: SwapPool!
}

input SwapWithdrawEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  sharesBurned: BigInt
  sharesBurned_not: BigInt
  sharesBurned_gt: BigInt
  sharesBurned_lt: BigInt
  sharesBurned_gte: BigInt
  sharesBurned_lte: BigInt
  sharesBurned_in: [BigInt!]
  sharesBurned_not_in: [BigInt!]
  SwapPool: String
  SwapPool_not: String
  SwapPool_gt: String
  SwapPool_lt: String
  SwapPool_gte: String
  SwapPool_lte: String
  SwapPool_in: [String!]
  SwapPool_not_in: [String!]
  SwapPool_contains: String
  SwapPool_contains_nocase: String
  SwapPool_not_contains: String
  SwapPool_not_contains_nocase: String
  SwapPool_starts_with: String
  SwapPool_starts_with_nocase: String
  SwapPool_not_starts_with: String
  SwapPool_not_starts_with_nocase: String
  SwapPool_ends_with: String
  SwapPool_ends_with_nocase: String
  SwapPool_not_ends_with: String
  SwapPool_not_ends_with_nocase: String
  SwapPool_: SwapPool_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SwapWithdrawEvent_filter]
  or: [SwapWithdrawEvent_filter]
}

enum SwapWithdrawEvent_orderBy {
  id
  timestamp
  blockNumber
  account
  amount
  sharesBurned
  SwapPool
  SwapPool__id
  SwapPool__createdAtTimestamp
  SwapPool__asset
  SwapPool__lpToken
  SwapPool__totalSupply
  SwapPool__liabilities
  SwapPool__unlocking
  SwapPool__volume
  SwapPool__volumeUSD
  SwapPool__fees
  SwapPool__feesUSD
  SwapPool__lpRewards
  SwapPool__lpRewardsUSD
  SwapPool__treasuryCut
  SwapPool__treasuryCutUSD
}

type Tenderizer {
  id: ID!
  symbol: String!
  name: String!
  validator: String!
  asset: Asset!
  createdAt: Int!
  tvl: BigDecimal!
  shares: BigDecimal!
  apr: BigDecimal!
  apy: BigDecimal!
  stakes(skip: Int = 0, first: Int = 100, orderBy: Stake_orderBy, orderDirection: OrderDirection, where: Stake_filter): [Stake!]!
  tenderizerDays(skip: Int = 0, first: Int = 100, orderBy: TenderizerDay_orderBy, orderDirection: OrderDirection, where: TenderizerDay_filter): [TenderizerDay!]!
  lastUpdateDay: BigInt!
  depositEvents(skip: Int = 0, first: Int = 100, orderBy: DepositEvent_orderBy, orderDirection: OrderDirection, where: DepositEvent_filter): [DepositEvent!]!
  unlockEvents(skip: Int = 0, first: Int = 100, orderBy: UnlockEvent_orderBy, orderDirection: OrderDirection, where: UnlockEvent_filter): [UnlockEvent!]!
  withdrawEvents(skip: Int = 0, first: Int = 100, orderBy: WithdrawEvent_orderBy, orderDirection: OrderDirection, where: WithdrawEvent_filter): [WithdrawEvent!]!
  rebaseEvents(skip: Int = 0, first: Int = 100, orderBy: RebaseEvent_orderBy, orderDirection: OrderDirection, where: RebaseEvent_filter): [RebaseEvent!]!
  tokenTransferEvents(skip: Int = 0, first: Int = 100, orderBy: TokenTransferEvent_orderBy, orderDirection: OrderDirection, where: TokenTransferEvent_filter): [TokenTransferEvent!]!
}

type TenderizerDay {
  id: ID!
  date: Int!
  tenderizer: Tenderizer!
  shares: BigDecimal!
  tvl: BigDecimal!
  startStake: BigDecimal!
  rewards: BigDecimal!
  apr: BigDecimal!
  apy: BigDecimal!
}

input TenderizerDay_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  date: Int
  date_not: Int
  date_gt: Int
  date_lt: Int
  date_gte: Int
  date_lte: Int
  date_in: [Int!]
  date_not_in: [Int!]
  tenderizer: String
  tenderizer_not: String
  tenderizer_gt: String
  tenderizer_lt: String
  tenderizer_gte: String
  tenderizer_lte: String
  tenderizer_in: [String!]
  tenderizer_not_in: [String!]
  tenderizer_contains: String
  tenderizer_contains_nocase: String
  tenderizer_not_contains: String
  tenderizer_not_contains_nocase: String
  tenderizer_starts_with: String
  tenderizer_starts_with_nocase: String
  tenderizer_not_starts_with: String
  tenderizer_not_starts_with_nocase: String
  tenderizer_ends_with: String
  tenderizer_ends_with_nocase: String
  tenderizer_not_ends_with: String
  tenderizer_not_ends_with_nocase: String
  tenderizer_: Tenderizer_filter
  shares: BigDecimal
  shares_not: BigDecimal
  shares_gt: BigDecimal
  shares_lt: BigDecimal
  shares_gte: BigDecimal
  shares_lte: BigDecimal
  shares_in: [BigDecimal!]
  shares_not_in: [BigDecimal!]
  tvl: BigDecimal
  tvl_not: BigDecimal
  tvl_gt: BigDecimal
  tvl_lt: BigDecimal
  tvl_gte: BigDecimal
  tvl_lte: BigDecimal
  tvl_in: [BigDecimal!]
  tvl_not_in: [BigDecimal!]
  startStake: BigDecimal
  startStake_not: BigDecimal
  startStake_gt: BigDecimal
  startStake_lt: BigDecimal
  startStake_gte: BigDecimal
  startStake_lte: BigDecimal
  startStake_in: [BigDecimal!]
  startStake_not_in: [BigDecimal!]
  rewards: BigDecimal
  rewards_not: BigDecimal
  rewards_gt: BigDecimal
  rewards_lt: BigDecimal
  rewards_gte: BigDecimal
  rewards_lte: BigDecimal
  rewards_in: [BigDecimal!]
  rewards_not_in: [BigDecimal!]
  apr: BigDecimal
  apr_not: BigDecimal
  apr_gt: BigDecimal
  apr_lt: BigDecimal
  apr_gte: BigDecimal
  apr_lte: BigDecimal
  apr_in: [BigDecimal!]
  apr_not_in: [BigDecimal!]
  apy: BigDecimal
  apy_not: BigDecimal
  apy_gt: BigDecimal
  apy_lt: BigDecimal
  apy_gte: BigDecimal
  apy_lte: BigDecimal
  apy_in: [BigDecimal!]
  apy_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TenderizerDay_filter]
  or: [TenderizerDay_filter]
}

enum TenderizerDay_orderBy {
  id
  date
  tenderizer
  tenderizer__id
  tenderizer__symbol
  tenderizer__name
  tenderizer__validator
  tenderizer__createdAt
  tenderizer__tvl
  tenderizer__shares
  tenderizer__apr
  tenderizer__apy
  tenderizer__lastUpdateDay
  shares
  tvl
  startStake
  rewards
  apr
  apy
}

input Tenderizer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  validator: String
  validator_not: String
  validator_gt: String
  validator_lt: String
  validator_gte: String
  validator_lte: String
  validator_in: [String!]
  validator_not_in: [String!]
  validator_contains: String
  validator_contains_nocase: String
  validator_not_contains: String
  validator_not_contains_nocase: String
  validator_starts_with: String
  validator_starts_with_nocase: String
  validator_not_starts_with: String
  validator_not_starts_with_nocase: String
  validator_ends_with: String
  validator_ends_with_nocase: String
  validator_not_ends_with: String
  validator_not_ends_with_nocase: String
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: Asset_filter
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  tvl: BigDecimal
  tvl_not: BigDecimal
  tvl_gt: BigDecimal
  tvl_lt: BigDecimal
  tvl_gte: BigDecimal
  tvl_lte: BigDecimal
  tvl_in: [BigDecimal!]
  tvl_not_in: [BigDecimal!]
  shares: BigDecimal
  shares_not: BigDecimal
  shares_gt: BigDecimal
  shares_lt: BigDecimal
  shares_gte: BigDecimal
  shares_lte: BigDecimal
  shares_in: [BigDecimal!]
  shares_not_in: [BigDecimal!]
  apr: BigDecimal
  apr_not: BigDecimal
  apr_gt: BigDecimal
  apr_lt: BigDecimal
  apr_gte: BigDecimal
  apr_lte: BigDecimal
  apr_in: [BigDecimal!]
  apr_not_in: [BigDecimal!]
  apy: BigDecimal
  apy_not: BigDecimal
  apy_gt: BigDecimal
  apy_lt: BigDecimal
  apy_gte: BigDecimal
  apy_lte: BigDecimal
  apy_in: [BigDecimal!]
  apy_not_in: [BigDecimal!]
  stakes_: Stake_filter
  tenderizerDays_: TenderizerDay_filter
  lastUpdateDay: BigInt
  lastUpdateDay_not: BigInt
  lastUpdateDay_gt: BigInt
  lastUpdateDay_lt: BigInt
  lastUpdateDay_gte: BigInt
  lastUpdateDay_lte: BigInt
  lastUpdateDay_in: [BigInt!]
  lastUpdateDay_not_in: [BigInt!]
  depositEvents_: DepositEvent_filter
  unlockEvents_: UnlockEvent_filter
  withdrawEvents_: WithdrawEvent_filter
  rebaseEvents_: RebaseEvent_filter
  tokenTransferEvents_: TokenTransferEvent_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Tenderizer_filter]
  or: [Tenderizer_filter]
}

enum Tenderizer_orderBy {
  id
  symbol
  name
  validator
  asset
  asset__id
  asset__tvl
  asset__tenderizerCount
  createdAt
  tvl
  shares
  apr
  apy
  stakes
  tenderizerDays
  lastUpdateDay
  depositEvents
  unlockEvents
  withdrawEvents
  rebaseEvents
  tokenTransferEvents
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type TokenTransferEvent {
  id: ID!
  timestamp: Int!
  amount: BigDecimal!
  shares: BigDecimal!
  from: User!
  to: User!
  asset: Asset!
  tenderizer: Tenderizer!
}

input TokenTransferEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  shares: BigDecimal
  shares_not: BigDecimal
  shares_gt: BigDecimal
  shares_lt: BigDecimal
  shares_gte: BigDecimal
  shares_lte: BigDecimal
  shares_in: [BigDecimal!]
  shares_not_in: [BigDecimal!]
  from: String
  from_not: String
  from_gt: String
  from_lt: String
  from_gte: String
  from_lte: String
  from_in: [String!]
  from_not_in: [String!]
  from_contains: String
  from_contains_nocase: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_: User_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: User_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: Asset_filter
  tenderizer: String
  tenderizer_not: String
  tenderizer_gt: String
  tenderizer_lt: String
  tenderizer_gte: String
  tenderizer_lte: String
  tenderizer_in: [String!]
  tenderizer_not_in: [String!]
  tenderizer_contains: String
  tenderizer_contains_nocase: String
  tenderizer_not_contains: String
  tenderizer_not_contains_nocase: String
  tenderizer_starts_with: String
  tenderizer_starts_with_nocase: String
  tenderizer_not_starts_with: String
  tenderizer_not_starts_with_nocase: String
  tenderizer_ends_with: String
  tenderizer_ends_with_nocase: String
  tenderizer_not_ends_with: String
  tenderizer_not_ends_with_nocase: String
  tenderizer_: Tenderizer_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenTransferEvent_filter]
  or: [TokenTransferEvent_filter]
}

enum TokenTransferEvent_orderBy {
  id
  timestamp
  amount
  shares
  from
  from__id
  to
  to__id
  asset
  asset__id
  asset__tvl
  asset__tenderizerCount
  tenderizer
  tenderizer__id
  tenderizer__symbol
  tenderizer__name
  tenderizer__validator
  tenderizer__createdAt
  tenderizer__tvl
  tenderizer__shares
  tenderizer__apr
  tenderizer__apy
  tenderizer__lastUpdateDay
}

type Unlock {
  id: ID!
  user: User!
  asset: Asset!
  tenderizer: Tenderizer!
  amount: BigDecimal!
  timestamp: Int!
  maturity: Int!
  redeemed: Boolean!
}

type UnlockEvent {
  id: ID!
  timestamp: Int!
  amount: BigDecimal!
  shares: BigDecimal!
  unlock: Unlock!
  user: User!
  asset: Asset!
  tenderizer: Tenderizer!
}

input UnlockEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  shares: BigDecimal
  shares_not: BigDecimal
  shares_gt: BigDecimal
  shares_lt: BigDecimal
  shares_gte: BigDecimal
  shares_lte: BigDecimal
  shares_in: [BigDecimal!]
  shares_not_in: [BigDecimal!]
  unlock: String
  unlock_not: String
  unlock_gt: String
  unlock_lt: String
  unlock_gte: String
  unlock_lte: String
  unlock_in: [String!]
  unlock_not_in: [String!]
  unlock_contains: String
  unlock_contains_nocase: String
  unlock_not_contains: String
  unlock_not_contains_nocase: String
  unlock_starts_with: String
  unlock_starts_with_nocase: String
  unlock_not_starts_with: String
  unlock_not_starts_with_nocase: String
  unlock_ends_with: String
  unlock_ends_with_nocase: String
  unlock_not_ends_with: String
  unlock_not_ends_with_nocase: String
  unlock_: Unlock_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: Asset_filter
  tenderizer: String
  tenderizer_not: String
  tenderizer_gt: String
  tenderizer_lt: String
  tenderizer_gte: String
  tenderizer_lte: String
  tenderizer_in: [String!]
  tenderizer_not_in: [String!]
  tenderizer_contains: String
  tenderizer_contains_nocase: String
  tenderizer_not_contains: String
  tenderizer_not_contains_nocase: String
  tenderizer_starts_with: String
  tenderizer_starts_with_nocase: String
  tenderizer_not_starts_with: String
  tenderizer_not_starts_with_nocase: String
  tenderizer_ends_with: String
  tenderizer_ends_with_nocase: String
  tenderizer_not_ends_with: String
  tenderizer_not_ends_with_nocase: String
  tenderizer_: Tenderizer_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UnlockEvent_filter]
  or: [UnlockEvent_filter]
}

enum UnlockEvent_orderBy {
  id
  timestamp
  amount
  shares
  unlock
  unlock__id
  unlock__amount
  unlock__timestamp
  unlock__maturity
  unlock__redeemed
  user
  user__id
  asset
  asset__id
  asset__tvl
  asset__tenderizerCount
  tenderizer
  tenderizer__id
  tenderizer__symbol
  tenderizer__name
  tenderizer__validator
  tenderizer__createdAt
  tenderizer__tvl
  tenderizer__shares
  tenderizer__apr
  tenderizer__apy
  tenderizer__lastUpdateDay
}

input Unlock_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: Asset_filter
  tenderizer: String
  tenderizer_not: String
  tenderizer_gt: String
  tenderizer_lt: String
  tenderizer_gte: String
  tenderizer_lte: String
  tenderizer_in: [String!]
  tenderizer_not_in: [String!]
  tenderizer_contains: String
  tenderizer_contains_nocase: String
  tenderizer_not_contains: String
  tenderizer_not_contains_nocase: String
  tenderizer_starts_with: String
  tenderizer_starts_with_nocase: String
  tenderizer_not_starts_with: String
  tenderizer_not_starts_with_nocase: String
  tenderizer_ends_with: String
  tenderizer_ends_with_nocase: String
  tenderizer_not_ends_with: String
  tenderizer_not_ends_with_nocase: String
  tenderizer_: Tenderizer_filter
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  maturity: Int
  maturity_not: Int
  maturity_gt: Int
  maturity_lt: Int
  maturity_gte: Int
  maturity_lte: Int
  maturity_in: [Int!]
  maturity_not_in: [Int!]
  redeemed: Boolean
  redeemed_not: Boolean
  redeemed_in: [Boolean!]
  redeemed_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Unlock_filter]
  or: [Unlock_filter]
}

enum Unlock_orderBy {
  id
  user
  user__id
  asset
  asset__id
  asset__tvl
  asset__tenderizerCount
  tenderizer
  tenderizer__id
  tenderizer__symbol
  tenderizer__name
  tenderizer__validator
  tenderizer__createdAt
  tenderizer__tvl
  tenderizer__shares
  tenderizer__apr
  tenderizer__apy
  tenderizer__lastUpdateDay
  amount
  timestamp
  maturity
  redeemed
}

type User {
  id: ID!
  stakes(skip: Int = 0, first: Int = 100, orderBy: Stake_orderBy, orderDirection: OrderDirection, where: Stake_filter): [Stake!]
  unlocks(skip: Int = 0, first: Int = 100, orderBy: Unlock_orderBy, orderDirection: OrderDirection, where: Unlock_filter): [Unlock!]
}

input User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stakes_: Stake_filter
  unlocks_: Unlock_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [User_filter]
  or: [User_filter]
}

enum User_orderBy {
  id
  stakes
  unlocks
}

type WithdrawEvent {
  id: ID!
  timestamp: Int!
  assetsOut: BigDecimal!
  unlock: Unlock!
  user: User!
  asset: Asset!
  tenderizer: Tenderizer!
}

input WithdrawEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  assetsOut: BigDecimal
  assetsOut_not: BigDecimal
  assetsOut_gt: BigDecimal
  assetsOut_lt: BigDecimal
  assetsOut_gte: BigDecimal
  assetsOut_lte: BigDecimal
  assetsOut_in: [BigDecimal!]
  assetsOut_not_in: [BigDecimal!]
  unlock: String
  unlock_not: String
  unlock_gt: String
  unlock_lt: String
  unlock_gte: String
  unlock_lte: String
  unlock_in: [String!]
  unlock_not_in: [String!]
  unlock_contains: String
  unlock_contains_nocase: String
  unlock_not_contains: String
  unlock_not_contains_nocase: String
  unlock_starts_with: String
  unlock_starts_with_nocase: String
  unlock_not_starts_with: String
  unlock_not_starts_with_nocase: String
  unlock_ends_with: String
  unlock_ends_with_nocase: String
  unlock_not_ends_with: String
  unlock_not_ends_with_nocase: String
  unlock_: Unlock_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: Asset_filter
  tenderizer: String
  tenderizer_not: String
  tenderizer_gt: String
  tenderizer_lt: String
  tenderizer_gte: String
  tenderizer_lte: String
  tenderizer_in: [String!]
  tenderizer_not_in: [String!]
  tenderizer_contains: String
  tenderizer_contains_nocase: String
  tenderizer_not_contains: String
  tenderizer_not_contains_nocase: String
  tenderizer_starts_with: String
  tenderizer_starts_with_nocase: String
  tenderizer_not_starts_with: String
  tenderizer_not_starts_with_nocase: String
  tenderizer_ends_with: String
  tenderizer_ends_with_nocase: String
  tenderizer_not_ends_with: String
  tenderizer_not_ends_with_nocase: String
  tenderizer_: Tenderizer_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [WithdrawEvent_filter]
  or: [WithdrawEvent_filter]
}

enum WithdrawEvent_orderBy {
  id
  timestamp
  assetsOut
  unlock
  unlock__id
  unlock__amount
  unlock__timestamp
  unlock__maturity
  unlock__redeemed
  user
  user__id
  asset
  asset__id
  asset__tvl
  asset__tenderizerCount
  tenderizer
  tenderizer__id
  tenderizer__symbol
  tenderizer__name
  tenderizer__validator
  tenderizer__createdAt
  tenderizer__tvl
  tenderizer__shares
  tenderizer__apr
  tenderizer__apy
  tenderizer__lastUpdateDay
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}