# Types

type Asset @entity {
  id: ID! # token address

  tvl: BigDecimal! # total value locked
  tenderizerCount: Int! # number of tenderizers for this asset

  # time series
  assetDays: [AssetDay!]! @derivedFrom(field: "asset")
}

type Tenderizer @entity {
  id: ID! # Tenderizer address

  # mirrored from the smart contract
  symbol: String!
  name: String!
  validator: String!
  asset: Asset!

  tvl: BigDecimal! # total value locked
  shares: BigDecimal! # total shares

  stakes: [Stake!]! @derivedFrom(field: "tenderizer")

  # time series
  tenderizerDays: [TenderizerDay!]! @derivedFrom(field: "tenderizer")
}

type User @entity {
  id: ID! # user address
  stakes: [Stake!] @derivedFrom(field: "user")
  unlocks: [Unlock!] @derivedFrom(field: "user")
}

type Stake @entity {
  id: ID! # tenderizer address + user address
  user: User!
  asset: Asset!
  tenderizer: Tenderizer!
  shares: BigDecimal!
}

type Unlock @entity {
  id: ID! # ID of the unlock
  user: User!
  tenderizer: Tenderizer!
  amount: BigDecimal!
  maturity: BigInt!
  redeemed: Boolean!
}

# Time Series

# Day data uses timestamps at 12:00 UTC for each day
# This is done by dividing the timestamp by 86400 and flooring it

type AssetDay @entity {
    id: ID! # asset address + date
    date: Int!

    asset: Asset!

    tvl: BigDecimal!
    rewards: BigDecimal!
}

type TenderizerDay @entity {
    id: ID! # tenderizer address + date
    date: Int!

    tenderizer: Tenderizer!

    tvl: BigDecimal!
    rewards: BigDecimal!
    shares: BigDecimal!
}
